{
  "id": 4,
  "step": 1,
  "title": "Advanced C++ Techniques and Design Patterns",
  "description": "Dive into advanced C++ topics such as templates, exception handling, memory management, and design patterns to write efficient and robust code.",
  "fulldescription": "lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
  "difficulty": "Advanced",
  "dateAdded": "2025-03-20",
  "modules": [
    {
      "title": "Templates and Generic Programming",
      "description": "Using templates for generic programming in C++.",
      "steps": [
        {
          "type": "text",
          "content": "Templates allow writing generic code. Learn function templates and class templates in C++."
        },
        {
          "type": "quiz-single",
          "question": "What keyword is used to define a template in C++?",
          "options": [
            { "text": "template", "correct": true },
            { "text": "generic", "correct": false },
            { "text": "class", "correct": false },
            { "text": "typename", "correct": false }
          ],
          "correctOption": 0
        },
        {
          "type": "answer",
          "question": "Write a C++ function template to swap two values.",
          "correctAnswer": "template<typename T> void swap(T& a, T& b) { T temp = a; a = b; b = temp; }"
        }
      ]
    },
    {
      "title": "Design Patterns",
      "description": "Implementing common design patterns in C++.",
      "steps": [
        {
          "type": "text",
          "content": "Design patterns like Singleton, Factory, and Observer solve common problems. Learn their implementation in C++."
        },
        {
          "type": "quiz-multi",
          "question": "Which design patterns are creational?",
          "options": [
            { "text": "Singleton", "correct": true },
            { "text": "Factory", "correct": true },
            { "text": "Observer", "correct": false },
            { "text": "Strategy", "correct": false }
          ]
        },
        {
          "type": "answer",
          "question": "Write a C++ Singleton class declaration.",
          "correctAnswer": "class Singleton { public: static Singleton& getInstance() { static Singleton instance; return instance; } private: Singleton() {} };"
        }
      ]
    },
    {
      "title": "Exception Handling",
      "description": "Managing errors with exceptions in C++.",
      "steps": [
        {
          "type": "text",
          "content": "Exceptions handle runtime errors. Learn try, catch, and throw in C++."
        },
        {
          "type": "quiz-single",
          "question": "Which block catches an exception in C++?",
          "options": [
            { "text": "catch", "correct": true },
            { "text": "try", "correct": false },
            { "text": "throw", "correct": false },
            { "text": "finally", "correct": false }
          ],
          "correctOption": 0
        }
      ]
    }
  ],
  "objectives": ["Master templates", "Implement design patterns", "Handle exceptions"],
  "prerequisites": "Introduction to C++ Programming",
  "instructor": { "name": "Dr. Evelyn Reed", "title": "Lead Instructor" }
}